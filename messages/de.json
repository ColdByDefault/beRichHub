{
  "BeRichHome": {
    "title": "Dein digitales Zentrum für Entwicklererfolg",
    "description": "Verwandle dich vom Programmieranfänger zum selbstbewussten Entwickler mit personalisierten Fahrplänen, umfassender Dokumentation und einem unterstützenden Lernökosystem, das auf deinen Erfolg ausgerichtet ist."
  },
  "History": {
    "sections": {
      "v1": {
        "version": "v1.0",
        "title": "Desktop-Grundlage",
        "subtitle": "Python- & Tkinter-Ära",
        "description": "Native Desktop-Anwendung, die automatisierte, vorbefüllte tägliche Berichtserstellung bietet.",
        "year": "2023",
        "status": "Altsystem",
        "metrics": { "users": "4+", "features": "2" }
      },
      "v2": {
        "version": "v2.0",
        "title": "Web-Revolution",
        "subtitle": "Flask & serverseitiges Rendering",
        "description": "Vollständige Umstellung auf eine webbasierte Plattform, die Mehrbenutzerzugriff und Echtzeit-Zusammenarbeit ermöglicht, mit integrierten Lernunterlagen.",
        "year": "2023",
        "status": "Veraltet",
        "metrics": { "users": "20+", "features": "8" }
      },
      "v3": {
        "version": "v3.0",
        "title": "Moderner Stack",
        "subtitle": "React & Komponentenarchitektur",
        "description": "Umfassender Neuaufbau mit dem React-Ökosystem und Einführung einer komponentenbasierten Architektur sowie moderner Entwicklungs-Workflows.",
        "year": "2024",
        "status": "Stabil",
        "metrics": { "users": "30+", "features": "20" }
      },
      "v4": {
        "version": "v4.0",
        "title": "Leistungssteigerung",
        "subtitle": "App Router & Server-Komponenten",
        "description": "Fortgeschrittene Leistungsoptimierungen mit Next.js App Router, React Server Components und strategischem Caching.",
        "year": "2024",
        "status": "Produktion",
        "metrics": { "users": "48+", "features": "28" }
      },
      "v5": {
        "version": "v5.0",
        "title": "Enterprise Ready",
        "subtitle": "KI-gestützt, skalierbar & mehrsprachig",
        "description": "Flaggschiff-Version, die KI-gesteuerte Einblicke, unternehmensgerechte Sicherheit, unbegrenzte Skalierbarkeit, mehrsprachige Unterstützung sowie einen LLM-Chatbot mit RAG-Integration und Offline-Repositorys bietet.",
        "year": "2025",
        "status": "Aktuell",
        "metrics": { "users": "130+", "features": "63" }
      }
    },
    "badge": "Projektevolution",
    "intro1": "Vom Desktop-Prototyp zur Unternehmensplattform.",
    "intro2": "5 Versionen. 2 Jahre. Unzählige Innovationen.",
    "Users": "Benutzer",
    "Features": "Funktionen",
    "techStack": "Technologie-Stack",
    "endSentence": "Kontinuierliche Weiterentwicklung seit 2023"
  },
  "Navbar": {
    "brand": "beRich.Hub®",
    "brainAlt": "KI",
    "llm": {
      "trigger": "LLM",
      "mainTitle": "Was ist ein Large Language Model?",
      "mainDesc": "Ein Large Language Model (LLM) ist ein KI-System, das mit riesigen Textdatensätzen trainiert wurde, um menschliche Sprache zu verstehen und in vielfältigen Anwendungsfällen zu erzeugen.",
      "intro": "Einführung",
      "introDesc": "Erfahre mehr über die Funktionen des beRichHub LLM Agenten und wie er Retrieval-Augmented Generation (RAG) integriert, um präzise, kontextbezogene Antworten zu liefern.",
      "offline": "Offline-LLM-Agent",
      "offlineDesc": "Erkunde die Einrichtung und Nutzung der Offline-Version des beRichHub LLM Agenten, einschließlich Installation der Abhängigkeiten und Aufbau der lokalen Anwendung."
    },
    "docs": {
      "item1": {
        "title": "Fahrpläne",
        "href": "/roadmaps",
        "description": "Sammlung von Fahrplänen, die dir helfen, deine Lernreise in der Softwareentwicklung zu navigieren."
      },
      "item2": {
        "title": "Grundlegende PC-Kenntnisse",
        "href": "/",
        "description": "Wesentliches Wissen über Personal Computer, einschließlich Hardware-Komponenten, Software und Fehlerbehebung."
      },
      "item3": {
        "title": "Programmiersprachen",
        "href": "/",
        "description": "Überblick über gängige Programmiersprachen, ihre Syntax und Anwendungsfälle."
      },
      "item4": {
        "title": "Algorithmen",
        "href": "/",
        "description": "Einführung in gängige Algorithmen und Datenstrukturen, einschließlich ihrer Implementierung und Anwendungsfälle."
      }
    }
  },
  "Footer": {
    "cookiePolicy": "Cookie-Richtlinie",
    "privacyPolicy": "Datenschutzerklärung",
    "termsofService": "Nutzungsbedingungen",
    "impressum": "Impressum",
    "moreAbout": "Mehr über mich",
    "resources": "Ressourcen",
    "allRights": "Alle Rechte vorbehalten"
  },
  "RoadmapItems": {
    "sections": {
      "1": {
        "id": 1,
        "title": "Grundlagen",
        "description": "Beherrsche die Grundlagen der Programmierung",
        "steps": {
          "0": "Lerne eine anfängerfreundliche Sprache (Python oder JavaScript)",
          "1": "Verstehe Variablen, Datentypen und Operatoren",
          "2": "Beherrsche Kontrollstrukturen (if/else, Schleifen)",
          "3": "Lerne Funktionen und grundlegende Datenstrukturen",
          "4": "Übe Problemlösung mit einfachen Übungen"
        }
      },
      "2": {
        "id": 2,
        "title": "Grundlagen der Webentwicklung",
        "description": "Erstelle deine ersten Websites",
        "steps": {
          "0": "Lerne HTML für die Struktur",
          "1": "Lerne CSS für das Styling",
          "2": "Verstehe Prinzipien des responsiven Designs",
          "3": "Einführung in JavaScript für Interaktivität",
          "4": "Erstelle einfache statische Websites"
        }
      },
      "3": {
        "id": 3,
        "title": "Versionskontrolle",
        "description": "Verfolge und verwalte deinen Code",
        "steps": {
          "0": "Lerne Git-Grundlagen (commit, push, pull)",
          "1": "Erstelle ein GitHub-Konto",
          "2": "Verstehe Branching und Merging",
          "3": "Arbeite mit anderen an Projekten zusammen",
          "4": "Erstelle dein erstes Repository"
        }
      },
      "4": {
        "id": 4,
        "title": "Frontend-Entwicklung",
        "description": "Erstelle interaktive Benutzeroberflächen",
        "steps": {
          "0": "Lerne ein Frontend-Framework (React, Vue oder Angular)",
          "1": "Verstehe komponentenbasierte Architektur",
          "2": "Beherrsche das Zustandsmanagement",
          "3": "Lerne über API-Integration",
          "4": "Erstelle interaktive Webanwendungen"
        }
      },
      "5": {
        "id": 5,
        "title": "Backend-Entwicklung",
        "description": "Erstelle serverseitige Anwendungen",
        "steps": {
          "0": "Lerne eine Backend-Sprache/-Framework (Node.js, Python/Django etc.)",
          "1": "Verstehe Datenbanken (SQL und NoSQL)",
          "2": "Erstelle RESTful-APIs",
          "3": "Implementiere Authentifizierung und Autorisierung"
        }
      },
      "6": {
        "id": 6,
        "title": "Fortgeschrittene Themen",
        "description": "Spezialisiere dich und erweitere deine Fähigkeiten",
        "steps": {}
      }
    },
    "paths": {
      "web": {
        "title": "Webentwicklung",
        "description": "Erstelle Websites und Webanwendungen, die in Browsern laufen"
      },
      "mobile": {
        "title": "Mobile-App-Entwicklung",
        "description": "Erstelle Apps für iOS- und Android-Geräte"
      },
      "backend": {
        "title": "Backend-Entwicklung",
        "description": "Erstelle serverseitige Anwendungen und APIs"
      }
    },
    "faqs": {
      "faq1": {
        "question": "Brauche ich einen Informatik-Abschluss, um Programmierer zu werden?",
        "answer": "Nein, du brauchst keinen Informatik-Abschluss, um Programmierer zu werden. Ein Abschluss kann eine strukturierte Ausbildung bieten und bei bestimmten Jobmöglichkeiten helfen, aber viele erfolgreiche Entwickler sind Autodidakten. Wichtiger sind deine Fähigkeiten, dein Portfolio und deine Problemlösungskompetenz."
      },
      "faq2": {
        "question": "Welche Programmiersprache sollte ich zuerst lernen?",
        "answer": "Python und JavaScript sind ausgezeichnete Optionen für Anfänger. Python ist bekannt für Lesbarkeit und Einfachheit und eignet sich gut zum Erlernen von Programmierkonzepten. JavaScript ist die Sprache des Webs und ermöglicht dir, interaktive Webseiten sofort zu erstellen. Wähle je nach Interesse: Python für allgemeine Programmierung, Data Science oder Backend; JavaScript für Webentwicklung."
      },
      "faq3": {
        "question": "Wie lange dauert es, Programmieren zu lernen?",
        "answer": "Programmieren zu lernen ist eine kontinuierliche Reise. Die Grundlagen kannst du in wenigen Wochen bis Monaten erlernen. Um jobbereit zu sein, braucht man typischerweise 6–12 Monate konsequenter Praxis. Meisterschaft ist ein langjähriger Prozess. Der Schlüssel ist kontinuierliche Übung und Projektarbeit."
      },
      "faq4": {
        "question": "Welche Art von Computer brauche ich zum Programmieren?",
        "answer": "Für Anfänger reicht jeder moderne Computer (weniger als 5 Jahre alt) mit mindestens 8 GB RAM. Du brauchst keine teure Ausstattung, um anzufangen. Bei komplexeren Projekten oder spezifischen Bereichen wie Spieleentwicklung oder maschinellem Lernen kann leistungsfähigere Hardware nötig sein."
      },
      "faq5": {
        "question": "Wie baue ich als Anfänger ein Portfolio auf?",
        "answer": "Beginne mit Tutorials und passe die Projekte anschließend an, um sie zu deinem eigenen zu machen. Erstelle dann Projekte, die reale Probleme lösen. Lege eine persönliche Website an, um deine Arbeit zu präsentieren. Trage zu Open-Source-Projekten bei. Dokumentiere deinen Lernweg in einem Blog oder auf GitHub. Qualität geht vor Quantität: Wenige gut durchdachte Projekte sind besser als viele unvollständige."
      },
      "faq6": {
        "question": "Ist es schwer, Programmieren zu lernen?",
        "answer": "Programmieren hat eine Lernkurve, ist aber mit der richtigen Herangehensweise zugänglich. Es erfordert logisches Denken und Problemlösungsfähigkeiten eher als fortgeschrittene Mathematik. Der Schlüssel ist Geduld, Beharrlichkeit und regelmäßiges Üben. Zerlege komplexe Probleme in kleinere Teile und hab keine Angst vor Fehlern – sie sind Teil des Lernprozesses."
      }
    }
  }
}
