{
  "BeRichHome": {
    "title": "Your Digital Hub for Developer Success",
    "description": "Transform from coding beginner to confident developer with personalized roadmaps, comprehensive documentation, and a supportive learning ecosystem designed for your success."
  },
  "History": {
    "sections": {
      "v1": {
        "version": "v1.0",
        "title": "Desktop Foundation",
        "subtitle": "Python & Tkinter Era",
        "description": "Native desktop application offering automated, pre-populated daily report generation.",
        "year": "2023",
        "status": "Legacy",
        "metrics": { "users": "4+", "features": "2" }
      },
      "v2": {
        "version": "v2.0",
        "title": "Web Revolution",
        "subtitle": "Flask & Server-Side Rendering",
        "description": "Complete shift to a web-based platform, enabling multi-user access and real-time collaboration, with integrated learning documents.",
        "year": "2023",
        "status": "Deprecated",
        "metrics": { "users": "20+", "features": "8" }
      },
      "v3": {
        "version": "v3.0",
        "title": "Modern Stack",
        "subtitle": "React & Component Architecture",
        "description": "Comprehensive rebuild with the React ecosystem, introducing component-based architecture and modern development workflows.",
        "year": "2024",
        "status": "Stable",
        "metrics": { "users": "30+", "features": "20" }
      },
      "v4": {
        "version": "v4.0",
        "title": "Performance Leap",
        "subtitle": "App Router & Server Components",
        "description": "Advanced performance optimizations using Next.js App Router, React Server Components, and strategic caching.",
        "year": "2024",
        "status": "Production",
        "metrics": { "users": "48+", "features": "28" }
      },
      "v5": {
        "version": "v5.0",
        "title": "Enterprise Ready",
        "subtitle": "AI-Powered, Scalable & Multi-Language",
        "description": "Flagship release delivering AI-driven insights, enterprise-grade security, unlimited scalability, multi-language support, plus an LLM chatbot with RAG integration and offline repositories.",
        "year": "2025",
        "status": "Current",
        "metrics": { "users": "130+", "features": "63" }
      }
    },
    "badge": "Project Evolution",
    "intro1": "From desktop prototype to enterprise-grade platform.",
    "intro2": "5 versions. 2 years. Countless innovations.",
    "Users": "Users",
    "Features": "Features",
    "techStack": "Technology Stack",
    "endSentence": "Continuously evolving since 2023"
  },
  "Navbar": {
    "brand": "beRich.Hub®",
    "brainAlt": "AI",
    "llm": {
      "trigger": "LLM",
      "mainTitle": "What is a Large Language Model?",
      "mainDesc": "A Large Language Model (LLM) is an AI system trained on massive text datasets to understand and generate human-like language across diverse tasks.",
      "intro": "Introduction",
      "introDesc": "Learn about the beRichHub LLM Agent's features, including how it integrates Retrieval-Augmented Generation (RAG) to deliver precise, context-aware responses.",
      "offline": "Offline LLM Agent",
      "offlineDesc": "Explore setup and usage of the offline version of the beRichHub LLM Agent, covering dependency installation and local application structure."
    },
    "docs": {
      "item1": {
        "title": "Roadmaps",
        "href": "/roadmaps",
        "description": "Collection of roadmaps to help you navigate your learning journey in software development."
      },
      "item2": {
        "title": "Basic PC Knowledge",
        "href": "/",
        "description": "Essential knowledge about personal computers, including hardware components, software, and troubleshooting."
      },
      "item3": {
        "title": "Programming Langiuages",
        "href": "/",
        "description": "Overview of popular programming languages, their syntax, and use cases."
      },
      "item4": {
        "title": "Algorithms",
        "href": "/",
        "description": "Introduction to common algorithms and data structures, including their implementation and use cases."
      }
    }
  },
  "Footer": {
    "cookiePolicy": "Cookie Policy",
    "privacyPolicy": "Privacy Policy",
    "termsofService": "Terms of Service",
    "impressum": "Impressum",
    "moreAbout": "More about me",
    "resources": "Resources",
    "allRights": "All rights reserved"
  },
  "RoadmapItems": {
    "sections": {
      "1": {
        "id": 1,
        "title": "Fundamentals",
        "description": "Master the basics of programming",
        "steps": {
          "0": "Learn a beginner-friendly language (Python or JavaScript)",
          "1": "Understand variables, data types, and operators",
          "2": "Master control structures (if/else, loops)",
          "3": "Learn functions and basic data structures",
          "4": "Practice problem-solving with simple exercises"
        }
      },
      "2": {
        "id": 2,
        "title": "Web Development Basics",
        "description": "Build your first websites",
        "steps": {
          "0": "Learn HTML for structure",
          "1": "Learn CSS for styling",
          "2": "Understand responsive design principles",
          "3": "Introduction to JavaScript for interactivity",
          "4": "Build simple static websites"
        }
      },
      "3": {
        "id": 3,
        "title": "Version Control",
        "description": "Track and manage your code",
        "steps": {
          "0": "Learn Git basics (commit, push, pull)",
          "1": "Create a GitHub account",
          "2": "Understand branching and merging",
          "3": "Collaborate on projects with others",
          "4": "Create your first repository"
        }
      },
      "4": {
        "id": 4,
        "title": "Frontend Development",
        "description": "Create interactive user interfaces",
        "steps": {
          "0": "Learn a frontend framework (React, Vue, or Angular)",
          "1": "Understand component-based architecture",
          "2": "Master state management",
          "3": "Learn about API integration",
          "4": "Build interactive web applications"
        }
      },
      "5": {
        "id": 5,
        "title": "Backend Development",
        "description": "Build server-side applications",
        "steps": {
          "0": "Learn a backend language/framework (Node.js, Python/Django, etc.)",
          "1": "Understand databases (SQL and NoSQL)",
          "2": "Create RESTful APIs",
          "3": "Implement authentication and authorization"
        }
      },
      "6": {
        "id": 6,
        "title": "Advanced Topics",
        "description": "Specialize and grow your skills",
        "steps": {}
      }
    },
    "paths": {
      "web": {
        "title": "Web Development",
        "description": "Build websites and web applications that run in browsers"
      },
      "mobile": {
        "title": "Web Development",
        "description": "Create apps for iOS and Android devices"
      },
      "backend": {
        "title": "Web Development",
        "description": "Build server-side applications and APIs"
      }
    },
    "faqs": {
      "faq1": {
        "question": "Do I need a computer science degree to become a programmer?",
        "answer": "No, you don't need a computer science degree to become a programmer. While a degree can provide a structured education and may help with certain job opportunities, many successful developers are self-taught. What matters most is your skills, portfolio, and ability to solve problems."
      },
      "faq2": {
        "question": "Which programming language should I learn first?",
        "answer": "Python and JavaScript are excellent choices for beginners. Python is known for its readability and simplicity, making it great for learning programming concepts. JavaScript is the language of the web and allows you to build interactive websites right away. Choose based on your interests: Python for general programming, data science, or backend; JavaScript for web development."
      },
      "faq3": {
        "question": "How long does it take to learn programming?",
        "answer": "Learning programming is a continuous journey. You can learn the basics in a few weeks to a couple of months. Becoming job-ready typically takes 6-12 months of consistent practice. Mastery is an ongoing process that takes years. The key is consistent practice and building projects."
      },
      "faq4": {
        "question": "What kind of computer do I need for programming?",
        "answer": "For beginners, any modern computer (less than 5 years old) with at least 8GB of RAM should be sufficient. You don't need an expensive setup to start learning. As you progress to more complex projects or specific fields like game development or machine learning, you might need more powerful hardware."
      },
      "faq5": {
        "question": "How do I build a portfolio as a beginner?",
        "answer": "Start by completing tutorials and then modify those projects to make them your own. Then, build projects that solve real problems you or others face. Create a personal website to showcase your work. Contribute to open-source projects. Document your learning journey through a blog or GitHub. Quality matters more than quantity—a few well-crafted projects are better than many incomplete ones."
      },
      "faq6": {
        "question": "Is programming hard to learn?",
        "answer": "Programming has a learning curve, but it's accessible with the right approach. It requires logical thinking and problem-solving skills rather than advanced math. The key is to be patient, persistent, and practice regularly. Break down complex problems into smaller parts, and don't be afraid to make mistakes—they're part of the learning process."
      }
    }
  }
}
